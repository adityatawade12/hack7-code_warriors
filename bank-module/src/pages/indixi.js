import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useEffect, useState } from 'react'

// import Token from '../abis/Token.json'

import Web3 from 'web3';
import Image from 'next/image';


export default function Home() {

	const [web3, setweb3] = useState(null);
	const [account, setaccount] = useState('');
	const [token, settoken] = useState(null);
	const [dbank, setdbank] = useState(null);
	const [balance, setbalance] = useState(0);
	const [borrowAmount, setborrowAmount] = useState(0);
	const [dBankAddress, setdBankAddress] = useState(null);
	
	useEffect(() => {
		loadBlockchainData()
	})
	
	
	const loadBlockchainData = () => {
		if (typeof window.ethereum !== 'undefined') {
			setweb3(new Web3(window.ethereum));
		}
		else {
			window.alert('Please Install metamask')
		}
	}

	useEffect(async ()=> {
		if (web3 != null) {
			const netId = await web3.eth.net.getId()
			const accounts = await web3.eth.getAccounts()
			if (accounts[0] !== null) {
				const bal = await web3.eth.getBalance(accounts[0])
				setaccount(accounts[0])
				setbalance(bal);
			}
			else {
				window.alert('Please login with metamask')
			}
			try {
				const tk = new web3.eth.Contract(Token.abi, Token.networks[netId].address)
				const dbk = new web3.eth.Contract(dBank.abi, dBank.networks[netId].address)
				const dbkAdd = dBank.networks[netId].address
				settoken(tk);
				setdbank(dbk);
				setdBankAddress(dbkAdd);
			}
			catch (e) {
				console.log('Error', e)
				window.alert('Contracts not deployed to the current network')
			}
		}
	}, [web3])
	
	const deposit = async (amount) => {
		if (dbank !== null) {
			try {
				await dbank.methods.deposit().send({
				value: amount.toString(),
				from: account
				})
			}
			catch (e) {
				console.log('Error, deposit:', e)
			}
		}
	}
	
	const withdraw = async (e) => {
		e.preventDefault()
		if (dbank !== 'undefined') {
			try {
				await dbank.methods.withdraw().send({
					from: account
				})
			}
			catch (e) {
				console.log('Error: withdraw', e)
			}
		}
	  }
	
	const borrow = async (amount) => {
		if (dbank !== null) {
			try {
				await dbank.methods.borrow().send({ value: amount.toString(), from: account })
			} catch (e) {
				console.log('Error, borrow: ', e)
			}
		}
	}
	
	const payOff = async (e) => {
		e.preventDefault()
		if (dbank !== null) {
			try {
				const collateralEther = await dbank.methods.collateralEther(account).call({ from: account })
				const tokenBorrowed = collateralEther / 2;
				await token.methods.approve(dBankAddress, tokenBorrowed.toString()).send({ from: account })
				await dbank.methods.payOff().send({ from: account })
			} catch (err) {
				console.log('Error, pay off: ', err);
			}
		}
	}

	return (<>
		<Head>
			<title>Create Next App</title>
			<meta name="description" content="Generated by create next app" />
			<meta name="viewport" content="width=device-width, initial-scale=1" />
		</Head>
		
		<main className={styles.main}>
			<div className='text-monospace'>
				<nav className="navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow">
				<a
					className="navbar-brand col-sm-3 col-md-2 mr-0"
					href="http://www.dappuniversity.com/bootcamp"
					target="_blank"
					rel="noopener noreferrer"
				>
					<Image src={'/logo.png'} className="App-logo" alt="logo" height="32"  width={32}/>
					<b>dBank</b>
				</a>
				</nav>
				<div className="container-fluid mt-5 text-center">
				<br></br>
				<h1>Welcome to dbank</h1>
				<h2>Acc: {account}</h2>
				<br></br>
				<div className="row">
					<main role="main" className="col-lg-12 d-flex text-center">
					<div className="content mr-auto ml-auto">
						{/* <Tabs defaultActiveKey="profile" id="uncontrolled-tab-example">
						<Tab eventKey="deposit" title="Deposit"> */}
							<div>
							<br></br>
							How much do you want to deposit?
							<br></br>
							(min amount is 0.01 ETH)
							<br></br>
							(1 deposit is possible at the time)
							<br></br>
							<form onSubmit={(e) => {
								e.preventDefault()
								let amount = depositAmount;
								amount = Web3.utils.toWei(amount.toString(), 'ether');
								deposit(amount);
							}}>
								<div className="form-group mr-sm-2">
								<br></br>
								<input
									id='depositAmount'
									step='0.01'
									type='number'
									className='form-control form-control-md'
									placeholder='amount...'
									required
									onChange={(e) => { setdepositAmount(e.target.value) }}
								/>
								</div>
								<button type="submit" className="btn btn-primary">DEPOSIT</button>
							</form>
							</div>
						{/* </Tab>
						<Tab eventKey="withdraw" title="Withdraw"> */}
							<div>
							<br></br>
							Do you want to withdraw + take interest?
							<br></br>
							<br></br>
							<div>
								<button type="submit" className="btn btn-primary" onClick={(e) => withdraw(e)}>WITHDRAW</button>
							</div>
							</div>
						{/* </Tab>
						<Tab eventKey="borrow" title="Borrow"> */}
							<div>

							<br></br>
							Do you want to borrow tokens?
							<br></br>
							(You'll get 50% of collateral, in Tokens)
							<br></br>
							Type collateral amount (in ETH)
							<br></br>
							<br></br>
							<form onSubmit={(e) => {
								e.preventDefault()
								let amount = borrowAmount
								amount = amount * 10 ** 18 //convert to wei
								borrow(amount)
							}}>
								<div className='form-group mr-sm-2'>
								<input
									id='borrowAmount'
									step="0.01"
									type='number'
									onChange={(e) => setborrowAmount(e.target.value)}
									className="form-control form-control-md"
									placeholder='amount...'
									required />
								</div>
								<button type='submit' className='btn btn-primary'>BORROW</button>
							</form>
							</div>
						{/* </Tab>
						<Tab eventKey="payOff" title="Payoff"> */}
							<div>

							<br></br>
							Do you want to payoff the loan?
							<br></br>
							(You'll receive your collateral - fee)
							<br></br>
							<br></br>
							<button type='submit' className='btn btn-primary' onClick={(e) => payOff(e)}>PAYOFF</button>
							</div>
						{/* </Tab>
						</Tabs> */}
					</div>
					</main>
				</div>
				<br></br>
				<br></br>
				</div>
			</div>
		</main>
	</>)
}
